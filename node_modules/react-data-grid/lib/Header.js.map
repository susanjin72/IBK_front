{"version":3,"file":"Header.js","sourceRoot":"","sources":["../src/Header.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useImperativeHandle } from 'react';\n\nimport HeaderRow from './HeaderRow';\nimport { getScrollbarSize, isPositionStickySupported } from './utils';\nimport { CalculatedColumn, HeaderRowData, ColumnMetrics, CellMetaData } from './common/types';\nimport { DEFINE_SORT } from './common/enums';\nimport { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, K extends keyof R> = Pick<DataGridProps<R, K>,\n| 'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'rowGetter'\n| 'rowsCount'\n| 'onHeaderDrop'\n| 'onSelectedRowsChange'\n| 'sortColumn'\n| 'sortDirection'\n> & Required<Pick<DataGridProps<R, K>,\n| 'rowKey'\n>>;\n\nexport interface HeaderProps<R, K extends keyof R> extends SharedDataGridProps<R, K> {\n  allRowsSelected: boolean;\n  columnMetrics: ColumnMetrics<R>;\n  headerRows: [HeaderRowData<R>, HeaderRowData<R> | undefined];\n  cellMetaData: CellMetaData<R>;\n  onSort?(columnKey: keyof R, direction: DEFINE_SORT): void;\n  onColumnResize(column: CalculatedColumn<R>, width: number): void;\n}\n\nexport interface HeaderHandle {\n  setScrollLeft(scrollLeft: number): void;\n}\n\nexport default forwardRef(function Header<R, K extends keyof R>(props: HeaderProps<R, K>, ref: React.Ref<HeaderHandle>) {\n  const headerRef = useRef<HTMLDivElement>(null);\n  const rowRef = useRef<HeaderRow<R, K>>(null);\n  const filterRowRef = useRef<HeaderRow<R, K>>(null);\n\n  useImperativeHandle(ref, () => ({\n    setScrollLeft(scrollLeft: number): void {\n      headerRef.current!.scrollLeft = scrollLeft;\n      if (isPositionStickySupported()) return;\n      rowRef.current!.setScrollLeft(scrollLeft);\n      if (filterRowRef.current) {\n        filterRowRef.current.setScrollLeft(scrollLeft);\n      }\n    }\n  }), []);\n\n  function handleAllRowsSelectionChange(checked: boolean) {\n    if (!props.onSelectedRowsChange) return;\n\n    const newSelectedRows = new Set<R[K]>();\n    if (checked) {\n      for (let i = 0; i < props.rowsCount; i++) {\n        newSelectedRows.add(props.rowGetter(i)[props.rowKey]);\n      }\n    }\n\n    props.onSelectedRowsChange(newSelectedRows);\n  }\n\n  function getHeaderRow(row: HeaderRowData<R>, ref?: React.RefObject<HeaderRow<R, K>>) {\n    return (\n      <HeaderRow<R, K>\n        key={row.rowType}\n        ref={ref}\n        rowType={row.rowType}\n        onColumnResize={props.onColumnResize}\n        width={props.columnMetrics.totalColumnWidth + getScrollbarSize()}\n        height={row.height}\n        columns={props.columnMetrics.columns}\n        lastFrozenColumnIndex={props.columnMetrics.lastFrozenColumnIndex}\n        draggableHeaderCell={props.draggableHeaderCell}\n        filterable={row.filterable}\n        onFilterChange={row.onFilterChange}\n        onHeaderDrop={props.onHeaderDrop}\n        allRowsSelected={props.allRowsSelected}\n        onAllRowsSelectionChange={handleAllRowsSelectionChange}\n        sortColumn={props.sortColumn}\n        sortDirection={props.sortDirection}\n        onSort={props.onSort}\n        getValidFilterValues={props.getValidFilterValues}\n      />\n    );\n  }\n\n  function getHeaderRows() {\n    const setRef = !isPositionStickySupported();\n    const { headerRows } = props;\n    const rows = [getHeaderRow(headerRows[0], setRef ? rowRef : undefined)];\n    if (headerRows[1]) {\n      rows.push(getHeaderRow(headerRows[1], setRef ? filterRowRef : undefined));\n    }\n\n    return rows;\n  }\n\n  // Set the cell selection to -1 x -1 when clicking on the header\n  function onHeaderClick(): void {\n    props.cellMetaData.onCellClick({ rowIdx: -1, idx: -1 });\n  }\n\n  return (\n    <div\n      ref={headerRef}\n      className=\"rdg-header\"\n      onClick={onHeaderClick}\n    >\n      {getHeaderRows()}\n    </div>\n  );\n} as React.RefForwardingComponent<HeaderHandle, HeaderProps<{ [key: string]: unknown }, string>>) as <R, K extends keyof R>(props: HeaderProps<R, K> & { ref?: React.Ref<HeaderHandle> }) => JSX.Element;\n"]}