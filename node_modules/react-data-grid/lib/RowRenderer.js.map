{"version":3,"file":"RowRenderer.js","sourceRoot":"","sources":["../src/RowRenderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { isElement } from 'react-is';\n\nimport Row from './Row';\nimport RowGroup from './RowGroup';\nimport { CanvasProps } from './Canvas';\nimport { IRowRendererProps, CalculatedColumn, SubRowDetails, RowData } from './common/types';\n\ntype SharedCanvasProps<R, K extends keyof R> = Pick<CanvasProps<R, K>,\n| 'cellMetaData'\n| 'columnMetrics'\n| 'eventBus'\n| 'getSubRowDetails'\n| 'onRowSelectionChange'\n| 'rowGroupRenderer'\n| 'rowHeight'\n| 'rowKey'\n| 'rowRenderer'\n| 'selectedRows'\n>;\n\nexport interface RowRendererProps<R, K extends keyof R> extends SharedCanvasProps<R, K> {\n  idx: number;\n  rowData: R;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  scrollLeft: number | undefined;\n  setRowRef(row: Row<R> | null, idx: number): void;\n}\n\ntype SharedActualRowRendererProps<R, K extends keyof R> = Pick<RowRendererProps<R, K>,\n| 'idx'\n| 'cellMetaData'\n| 'onRowSelectionChange'\n| 'colOverscanStartIdx'\n| 'colOverscanEndIdx'\n| 'scrollLeft'\n>;\n\ninterface RendererProps<R, K extends keyof R> extends SharedActualRowRendererProps<R, K> {\n  ref: React.Ref<Row<R>>;\n  row: R;\n  columns: CalculatedColumn<R>[];\n  lastFrozenColumnIndex: number;\n  subRowDetails?: SubRowDetails;\n  width: number;\n  height: number;\n  isRowSelected: boolean;\n  isSummaryRow: boolean;\n}\n\nfunction RowRenderer<R, K extends keyof R>({\n  cellMetaData,\n  colOverscanEndIdx,\n  colOverscanStartIdx,\n  columnMetrics,\n  eventBus,\n  getSubRowDetails,\n  idx,\n  onRowSelectionChange,\n  rowData,\n  rowGroupRenderer,\n  rowHeight,\n  rowKey,\n  rowRenderer,\n  scrollLeft,\n  selectedRows,\n  setRowRef\n}: RowRendererProps<R, K>) {\n  const { __metaData } = rowData as RowData;\n  const rendererProps: RendererProps<R, K> = {\n    ref(row) {\n      setRowRef(row, idx);\n    },\n    idx,\n    row: rowData,\n    width: columnMetrics.totalColumnWidth,\n    height: rowHeight,\n    columns: columnMetrics.columns,\n    isRowSelected: selectedRows !== undefined && selectedRows.has(rowData[rowKey]),\n    onRowSelectionChange,\n    cellMetaData,\n    subRowDetails: getSubRowDetails ? getSubRowDetails(rowData) : undefined,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex: columnMetrics.lastFrozenColumnIndex,\n    scrollLeft,\n    isSummaryRow: false\n  };\n\n  function renderCustomRowRenderer() {\n    const { ref, ...otherProps } = rendererProps;\n    const CustomRowRenderer = rowRenderer!;\n    const customRowRendererProps = { ...otherProps, renderBaseRow: (p: IRowRendererProps<R>) => <Row ref={ref} {...p} /> };\n\n    if (isElement(CustomRowRenderer)) {\n      if (CustomRowRenderer.type === Row) {\n        // In the case where Row is specified as the custom render, ensure the correct ref is passed\n        return <Row<R> {...rendererProps} />;\n      }\n      return React.cloneElement(CustomRowRenderer, customRowRendererProps);\n    }\n\n    return <CustomRowRenderer {...customRowRendererProps} />;\n  }\n\n  function renderGroupRow() {\n    const { ref, columns, ...rowGroupProps } = rendererProps;\n\n    return (\n      <RowGroup\n        {...rowGroupProps}\n        {...__metaData!}\n        columns={columns as CalculatedColumn<unknown>[]}\n        name={(rowData as RowData).name!}\n        eventBus={eventBus}\n        renderer={rowGroupRenderer}\n        renderBaseRow={(p: IRowRendererProps<R>) => <Row ref={ref} {...p} />}\n      />\n    );\n  }\n\n  if (__metaData) {\n    if (__metaData.getRowRenderer) {\n      return __metaData.getRowRenderer(rendererProps, idx);\n    }\n    if (__metaData.isGroup) {\n      return renderGroupRow();\n    }\n  }\n\n  if (rowRenderer) {\n    return renderCustomRowRenderer();\n  }\n\n  return <Row<R> {...rendererProps} />;\n}\n\nexport default memo(RowRenderer) as <R, K extends keyof R>(props: RowRendererProps<R, K>) => JSX.Element;\n"]}