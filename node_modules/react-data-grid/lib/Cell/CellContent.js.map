{"version":3,"file":"CellContent.js","sourceRoot":"","sources":["../../src/Cell/CellContent.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createElement, cloneElement } from 'react';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport CellActions from './CellActions';\nimport CellExpand from './CellExpander';\nimport { SimpleCellFormatter } from '../formatters';\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nimport { CellContentRendererProps } from '../common/types';\n\nexport default function CellContent<R>({\n  idx,\n  rowIdx,\n  column,\n  rowData,\n  cellMetaData,\n  expandableOptions,\n  isRowSelected,\n  isSummaryRow,\n  onRowSelectionChange\n}: CellContentRendererProps<R>): JSX.Element {\n  const isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  const treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  const style = expandableOptions && isExpandCell ? { marginLeft: expandableOptions.treeDepth * 30 } : undefined;\n\n  function getFormatterDependencies(row: R) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of react-data-grid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value: rowData[column.key],\n      column,\n      rowIdx,\n      row: rowData,\n      isRowSelected,\n      onRowSelectionChange,\n      dependentValues: getFormatterDependencies(rowData),\n      isSummaryRow\n    };\n  }\n\n  function getFormattedValue(formatter: typeof column['formatter']) {\n    if (formatter === undefined) {\n      return <SimpleCellFormatter value={rowData[column.key] as unknown as string} />;\n    }\n\n    if (isValidElementType(formatter)) {\n      return createElement<ReturnType<typeof getFormatterProps>>(formatter, getFormatterProps());\n    }\n\n    if (isElement(formatter)) {\n      return cloneElement(formatter, getFormatterProps());\n    }\n\n    return null;\n  }\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx,\n        rowIdx,\n        rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  function handleCellExpand() {\n    if (cellMetaData.onCellExpand) {\n      cellMetaData.onCellExpand({ rowIdx, idx, rowData, expandArgs: expandableOptions });\n    }\n  }\n\n  return (\n    <>\n      {cellMetaData.getCellActions && (\n        <CellActions<R>\n          column={column}\n          rowData={rowData}\n          getCellActions={cellMetaData.getCellActions}\n        />\n      )}\n      {expandableOptions && expandableOptions.canExpand && (\n        <CellExpand\n          expanded={expandableOptions.expanded}\n          onCellExpand={handleCellExpand}\n        />\n      )}\n      <div className=\"rdg-cell-value\">\n        {expandableOptions && treeDepth > 0 && isExpandCell && (\n          <ChildRowDeleteButton\n            treeDepth={treeDepth}\n            onDeleteSubRow={handleDeleteSubRow}\n            isDeleteSubRowEnabled={!!cellMetaData.onDeleteSubRow}\n          />\n        )}\n        <div style={style}>\n          {getFormattedValue(column.formatter)}\n        </div>\n      </div>\n    </>\n  );\n}\n"]}