{"version":3,"file":"CellActions.js","sourceRoot":"","sources":["../../src/Cell/CellActions.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,UAAU,MAAM,cAAc,CAAC;AAKtC,MAAM,CAAC,OAAO,UAAU,WAAW,CAAI,EAAwD;QAAtD,kCAAc,EAAE,kBAAM,EAAE,oBAAO;IACtE,IAAM,iBAAiB,GAAG,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1D,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;QACrD,IAAM,aAAa,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK;YACxD,OAAO,oBAAC,UAAU,aAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,KAAK,CAAC,IAAM,MAAM,EAAI,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,OAAO,0CAAG,aAAa,CAAI,CAAC;KAC7B;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import React from 'react';\n\nimport CellAction from './CellAction';\nimport { CellMetaData, CellContentRendererProps } from '../common/types';\n\ntype CellActionsProps<R> = Pick<CellContentRendererProps<R>, 'column' | 'rowData'> & Pick<Required<CellMetaData<R>>, 'getCellActions'>;\n\nexport default function CellActions<R>({ getCellActions, column, rowData }: CellActionsProps<R>) {\n  const cellActionButtons = getCellActions(column, rowData);\n  if (cellActionButtons && cellActionButtons.length > 0) {\n    const actionButtons = cellActionButtons.map((action, index) => {\n      return <CellAction key={index} isFirst={index === 0} {...action} />;\n    });\n\n    return <>{actionButtons}</>;\n  }\n  return null;\n}\n"]}