{"version":3,"file":"Canvas.js","sourceRoot":"","sources":["../src/Canvas.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { EventTypes } from './common/enums';\nimport { CalculatedColumn, CellMetaData, ColumnMetrics, InteractionMasksMetaData, Position, ScrollPosition } from './common/types';\nimport EventBus from './EventBus';\nimport InteractionMasks from './masks/InteractionMasks';\nimport { DataGridProps } from './DataGrid';\nimport Row from './Row';\nimport RowRenderer from './RowRenderer';\nimport SummaryRowRenderer from './SummaryRowRenderer';\nimport { getColumnScrollPosition, getScrollbarSize, isPositionStickySupported } from './utils';\nimport { getHorizontalRangeToRender, getVerticalRangeToRender } from './utils/viewportUtils';\n\ntype SharedDataGridProps<R, K extends keyof R> = Pick<DataGridProps<R, K>,\n| 'rowGetter'\n| 'rowsCount'\n| 'rowRenderer'\n| 'rowGroupRenderer'\n| 'scrollToRowIndex'\n| 'contextMenu'\n| 'RowsContainer'\n| 'getSubRowDetails'\n| 'selectedRows'\n| 'summaryRows'\n> & Required<Pick<DataGridProps<R, K>,\n| 'rowKey'\n| 'enableCellSelect'\n| 'rowHeight'\n| 'cellNavigationMode'\n| 'enableCellAutoFocus'\n| 'editorPortalTarget'\n| 'renderBatchSize'\n>>;\n\nexport interface CanvasProps<R, K extends keyof R> extends SharedDataGridProps<R, K> {\n  columnMetrics: ColumnMetrics<R>;\n  cellMetaData: CellMetaData<R>;\n  height: number;\n  eventBus: EventBus;\n  interactionMasksMetaData: InteractionMasksMetaData<R>;\n  onScroll(position: ScrollPosition): void;\n  onCanvasKeydown?(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onCanvasKeyup?(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onRowSelectionChange(rowIdx: number, row: R, checked: boolean, isShiftClick: boolean): void;\n}\n\nexport default function Canvas<R, K extends keyof R>({\n  cellMetaData,\n  cellNavigationMode,\n  columnMetrics,\n  contextMenu,\n  editorPortalTarget,\n  enableCellAutoFocus,\n  enableCellSelect,\n  eventBus,\n  getSubRowDetails,\n  height,\n  interactionMasksMetaData,\n  onCanvasKeydown,\n  onCanvasKeyup,\n  onRowSelectionChange,\n  onScroll,\n  renderBatchSize,\n  rowGetter,\n  rowGroupRenderer,\n  rowHeight,\n  rowKey,\n  rowRenderer,\n  RowsContainer,\n  rowsCount,\n  scrollToRowIndex,\n  selectedRows,\n  summaryRows\n}: CanvasProps<R, K>) {\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const canvas = useRef<HTMLDivElement>(null);\n  const summaryRef = useRef<HTMLDivElement>(null);\n  const prevScrollToRowIndex = useRef<number | undefined>();\n  const [rowRefs] = useState(() => new Map<number, Row<R>>());\n\n  const clientHeight = getClientHeight();\n  const nonStickyScrollLeft = isPositionStickySupported() ? undefined : scrollLeft;\n\n  const [rowOverscanStartIdx, rowOverscanEndIdx] = getVerticalRangeToRender(\n    clientHeight,\n    rowHeight,\n    scrollTop,\n    rowsCount,\n    renderBatchSize\n  );\n\n  const { colOverscanStartIdx, colOverscanEndIdx, colVisibleStartIdx, colVisibleEndIdx } = useMemo(() => {\n    return getHorizontalRangeToRender({\n      columnMetrics,\n      scrollLeft\n    });\n  }, [columnMetrics, scrollLeft]);\n\n  useEffect(() => {\n    return eventBus.subscribe(EventTypes.SCROLL_TO_COLUMN, idx => scrollToColumn(idx, columnMetrics.columns));\n  }, [columnMetrics.columns, eventBus]);\n\n  useEffect(() => {\n    if (prevScrollToRowIndex.current === scrollToRowIndex) return;\n    prevScrollToRowIndex.current = scrollToRowIndex;\n    const { current } = canvas;\n    if (typeof scrollToRowIndex === 'number' && current) {\n      current.scrollTop = scrollToRowIndex * rowHeight;\n    }\n  }, [rowHeight, scrollToRowIndex]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollLeft, scrollTop } = e.currentTarget;\n    setScrollLeft(scrollLeft);\n    setScrollTop(scrollTop);\n    onScroll({ scrollLeft, scrollTop });\n    if (summaryRef.current) {\n      summaryRef.current.scrollLeft = scrollLeft;\n    }\n  }\n\n  function getClientHeight() {\n    if (canvas.current) return canvas.current.clientHeight;\n    const scrollbarSize = columnMetrics.totalColumnWidth > columnMetrics.viewportWidth ? getScrollbarSize() : 0;\n    return height - scrollbarSize;\n  }\n\n  function onHitBottomCanvas({ rowIdx }: Position) {\n    const { current } = canvas;\n    if (current) {\n      // We do not need to check for the index being in range, as the scrollTop setter will adequately clamp the value.\n      current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n    }\n  }\n\n  function onHitTopCanvas({ rowIdx }: Position) {\n    const { current } = canvas;\n    if (current) {\n      current.scrollTop = rowIdx * rowHeight;\n    }\n  }\n\n  function handleHitColummBoundary({ idx }: Position) {\n    scrollToColumn(idx, columnMetrics.columns);\n  }\n\n  function getRowColumns(rowIdx: number) {\n    const row = rowRefs.get(rowIdx);\n    return row && row.props ? row.props.columns : columnMetrics.columns;\n  }\n\n  function scrollToColumn(idx: number, columns: CalculatedColumn<R>[]) {\n    const { current } = canvas;\n    if (!current) return;\n\n    const { scrollLeft, clientWidth } = current;\n    const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n    if (newScrollLeft !== 0) {\n      current.scrollLeft = scrollLeft + newScrollLeft;\n    }\n  }\n\n  const setRowRef = useCallback((row: Row<R> | null, idx: number) => {\n    if (row === null) {\n      rowRefs.delete(idx);\n    } else {\n      rowRefs.set(idx, row);\n    }\n  }, [rowRefs]);\n\n  function getViewportRows() {\n    const rowElements = [];\n    for (let idx = rowOverscanStartIdx; idx <= rowOverscanEndIdx; idx++) {\n      const rowData = rowGetter(idx);\n      rowElements.push(\n        <RowRenderer<R, K>\n          key={idx}\n          idx={idx}\n          rowData={rowData}\n          setRowRef={setRowRef}\n          cellMetaData={cellMetaData}\n          colOverscanEndIdx={colOverscanEndIdx}\n          colOverscanStartIdx={colOverscanStartIdx}\n          columnMetrics={columnMetrics}\n          eventBus={eventBus}\n          getSubRowDetails={getSubRowDetails}\n          onRowSelectionChange={onRowSelectionChange}\n          rowGroupRenderer={rowGroupRenderer}\n          rowHeight={rowHeight}\n          rowKey={rowKey}\n          rowRenderer={rowRenderer}\n          scrollLeft={nonStickyScrollLeft}\n          selectedRows={selectedRows}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  let grid = (\n    <div\n      className=\"rdg-grid\"\n      style={{\n        width: columnMetrics.totalColumnWidth,\n        paddingTop: rowOverscanStartIdx * rowHeight,\n        paddingBottom: (rowsCount - 1 - rowOverscanEndIdx) * rowHeight\n      }}\n    >\n      {getViewportRows()}\n    </div>\n  );\n\n  if (RowsContainer !== undefined) {\n    grid = <RowsContainer id={contextMenu ? contextMenu.props.id : 'rowsContainer'}>{grid}</RowsContainer>;\n  }\n\n  const summary = summaryRows && summaryRows.length > 0 && (\n    <div ref={summaryRef} className=\"rdg-summary\">\n      {summaryRows.map((rowData, idx) => (\n        <SummaryRowRenderer<R, K>\n          key={idx}\n          idx={idx}\n          rowData={rowData}\n          cellMetaData={cellMetaData}\n          colOverscanEndIdx={colOverscanEndIdx}\n          colOverscanStartIdx={colOverscanStartIdx}\n          columnMetrics={columnMetrics}\n          rowHeight={rowHeight}\n          scrollLeft={nonStickyScrollLeft}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <>\n      <div\n        className=\"rdg-viewport\"\n        style={{ height: height - 2 - (summaryRows ? summaryRows.length * rowHeight + 2 : 0) }}\n        ref={canvas}\n        onScroll={handleScroll}\n        onKeyDown={onCanvasKeydown}\n        onKeyUp={onCanvasKeyup}\n      >\n        <InteractionMasks<R, K>\n          rowGetter={rowGetter}\n          rowsCount={rowsCount}\n          rowHeight={rowHeight}\n          columns={columnMetrics.columns}\n          height={clientHeight}\n          colVisibleStartIdx={colVisibleStartIdx}\n          colVisibleEndIdx={colVisibleEndIdx}\n          enableCellSelect={enableCellSelect}\n          enableCellAutoFocus={enableCellAutoFocus}\n          cellNavigationMode={cellNavigationMode}\n          eventBus={eventBus}\n          contextMenu={contextMenu}\n          onHitBottomBoundary={onHitBottomCanvas}\n          onHitTopBoundary={onHitTopCanvas}\n          onHitLeftBoundary={handleHitColummBoundary}\n          onHitRightBoundary={handleHitColummBoundary}\n          scrollLeft={scrollLeft}\n          scrollTop={scrollTop}\n          getRowColumns={getRowColumns}\n          editorPortalTarget={editorPortalTarget}\n          {...interactionMasksMetaData}\n        />\n        {grid}\n      </div>\n      {summary}\n    </>\n  );\n}\n"]}