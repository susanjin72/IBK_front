{"version":3,"file":"DataGrid.js","sourceRoot":"","sources":["../src/DataGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useImperativeHandle,\n  createElement\n} from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Header, { HeaderHandle } from './Header';\nimport Canvas from './Canvas';\nimport { legacyCellContentRenderer } from './Cell/cellContentRenderers';\nimport { getColumnMetrics } from './utils/columnUtils';\nimport EventBus from './EventBus';\nimport { CellNavigationMode, EventTypes, UpdateActions, HeaderRowType, DEFINE_SORT } from './common/enums';\nimport {\n  AddFilterEvent,\n  CalculatedColumn,\n  CellActionButton,\n  CellCopyPasteEvent,\n  CellMetaData,\n  CheckCellIsEditableEvent,\n  Column,\n  CellContentRenderer,\n  CommitEvent,\n  GridRowsUpdatedEvent,\n  HeaderRowData,\n  InteractionMasksMetaData,\n  Position,\n  RowsContainerProps,\n  RowExpandToggleEvent,\n  RowGetter,\n  SelectedRange,\n  SubRowDetails,\n  SubRowOptions,\n  IRowRendererProps,\n  ScrollPosition\n} from './common/types';\n\nexport interface DataGridProps<R, K extends keyof R> {\n  /** An array of objects representing each column on the grid */\n  columns: Column<R>[];\n  /** The minimum width of the grid in pixels */\n  minWidth?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n  /** Toggles whether filters row is displayed or not */\n  enableHeaderFilters?: boolean;\n  cellRangeSelection?: {\n    onStart(selectedRange: SelectedRange): void;\n    onUpdate?(selectedRange: SelectedRange): void;\n    onComplete?(selectedRange: SelectedRange): void;\n  };\n  /** Minimum column width in pixels */\n  minColumnWidth?: number;\n  /** Function called whenever row is clicked */\n  onRowClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  /** Function called whenever row is double clicked */\n  onRowDoubleClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  onAddFilter?(event: AddFilterEvent<R>): void;\n  /** Function called whenever grid is sorted*/\n  onGridSort?(columnKey: keyof R, direction: DEFINE_SORT): void;\n  /** Function called whenever keyboard key is released */\n  onGridKeyUp?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  /** Function called whenever keyboard key is pressed down */\n  onGridKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;\n\n  selectedRows?: Set<R[K]>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?(selectedRows: Set<R[K]>): void;\n\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onGridRowsUpdated?<E extends GridRowsUpdatedEvent<R>>(event: E): void;\n  /** Called when a column is resized */\n  onColumnResize?(idx: number, width: number): void;\n\n  /** Grid Props */\n  /** The primary key property of each row */\n  rowKey?: K;\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  defaultCellContentRenderer?: CellContentRenderer<R>;\n  rowRenderer?: React.ReactElement | React.ComponentType<IRowRendererProps<R>>;\n  rowGroupRenderer?: React.ComponentType;\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rowGetter: RowGetter<R>;\n  /** The number of rows to be rendered */\n  rowsCount: number;\n  /** The minimum height of the grid in pixels */\n  minHeight?: number;\n  /** When set, grid will scroll to this row index */\n  scrollToRowIndex?: number;\n  /** Component used to render a context menu. react-data-grid-addons provides a default context menu which may be used*/\n  contextMenu?: React.ReactElement;\n  /** Used to toggle whether cells can be selected or not */\n  enableCellSelect?: boolean;\n  /** Toggles whether cells should be autofocused */\n  enableCellAutoFocus?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: keyof R;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: DEFINE_SORT;\n  /** Called when the grid is scrolled */\n  onScroll?(scrollPosition: ScrollPosition): void;\n  /** Component used to render a draggable header cell */\n  draggableHeaderCell?: React.ComponentType<{ column: CalculatedColumn<R>; onHeaderDrop(): void }>;\n  getValidFilterValues?(columnKey: keyof R): unknown;\n  RowsContainer?: React.ComponentType<RowsContainerProps>;\n  emptyRowsView?: React.ComponentType<{}>;\n  onHeaderDrop?(): void;\n  getSubRowDetails?(row: R): SubRowDetails;\n\n  /** CellMetaData */\n  getCellActions?(column: CalculatedColumn<R>, rowData: R): CellActionButton[] | undefined;\n  /** Called whenever a sub row is deleted from the grid */\n  onDeleteSubRow?(options: SubRowOptions<R>): void;\n  /** Called whenever a sub row is added to the grid */\n  onAddSubRow?(): void;\n  /** Function called whenever a cell has been expanded */\n  onCellExpand?(options: SubRowOptions<R>): void;\n  onRowExpandToggle?(event: RowExpandToggleEvent): void;\n\n  /** InteractionMasksMetaData */\n  /** Deprecated: Function called when grid is updated via a copy/paste. Use onGridRowsUpdated instead*/\n  onCellCopyPaste?(event: CellCopyPasteEvent<R>): void;\n  /** Function called whenever a cell is selected */\n  onCellSelected?(position: Position): void;\n  /** Function called whenever a cell is deselected */\n  onCellDeSelected?(position: Position): void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?(event: CheckCellIsEditableEvent<R>): boolean;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: R[];\n  /** Control how big render row batches will be. */\n  renderBatchSize?: number;\n}\n\nexport interface DataGridHandle {\n  scrollToColumn(colIdx: number): void;\n  selectCell(position: Position, openEditor?: boolean): void;\n  openCellEditor(rowIdx: number, colIdx: number): void;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rowGetter={i => rows[i]} rowsCount={3} />\n*/\nfunction DataGrid<R, K extends keyof R>({\n  rowKey = 'id' as K,\n  rowHeight = 35,\n  headerFiltersHeight = 45,\n  minColumnWidth = 80,\n  minHeight = 350,\n  minWidth: width,\n  enableCellSelect = false,\n  enableCellAutoFocus = true,\n  cellNavigationMode = CellNavigationMode.NONE,\n  editorPortalTarget = document.body,\n  renderBatchSize = 8,\n  defaultCellContentRenderer = legacyCellContentRenderer,\n  columns,\n  rowsCount,\n  rowGetter,\n  cellRangeSelection,\n  selectedRows,\n  onSelectedRowsChange,\n  ...props\n}: DataGridProps<R, K>, ref: React.Ref<DataGridHandle>) {\n  const [columnWidths, setColumnWidths] = useState(() => new Map<keyof R, number>());\n  const [eventBus] = useState(() => new EventBus());\n  const [gridWidth, setGridWidth] = useState(0);\n  const gridRef = useRef<HTMLDivElement>(null);\n  const headerRef = useRef<HeaderHandle>(null);\n  const lastSelectedRowIdx = useRef(-1);\n  const viewportWidth = (width || gridWidth) - 2; // 2 for border width;\n  const scrollLeft = useRef(0);\n\n  const columnMetrics = useMemo(() => {\n    if (viewportWidth <= 0) return null;\n\n    return getColumnMetrics<R>({\n      columns,\n      minColumnWidth,\n      viewportWidth,\n      columnWidths,\n      defaultCellContentRenderer\n    });\n  }, [columnWidths, columns, defaultCellContentRenderer, minColumnWidth, viewportWidth]);\n\n  useLayoutEffect(() => {\n    // Do not calculate the width if minWidth is provided\n    if (width) return;\n    function onResize() {\n      // Immediately re-render when the component is mounted to get valid columnMetrics.\n      setGridWidth(gridRef.current!.getBoundingClientRect().width);\n    }\n    onResize();\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [width]);\n\n  useEffect(() => {\n    if (!cellRangeSelection) return;\n\n    function handleWindowMouseUp() {\n      eventBus.dispatch(EventTypes.SELECT_END);\n    }\n\n    window.addEventListener('mouseup', handleWindowMouseUp);\n\n    return () => {\n      window.removeEventListener('mouseup', handleWindowMouseUp);\n    };\n  }, [eventBus, cellRangeSelection]);\n\n  function selectCell({ idx, rowIdx }: Position, openEditor?: boolean) {\n    eventBus.dispatch(EventTypes.SELECT_CELL, { rowIdx, idx }, openEditor);\n  }\n\n  function getColumn(idx: number) {\n    return columnMetrics!.columns[idx];\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R>, width: number) {\n    const newColumnWidths = new Map(columnWidths);\n    width = Math.max(width, minColumnWidth);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    if (props.onColumnResize) {\n      props.onColumnResize(column.idx, width);\n    }\n  }\n\n  function handleScroll(scrollPosition: ScrollPosition) {\n    if (headerRef.current && scrollLeft.current !== scrollPosition.scrollLeft) {\n      scrollLeft.current = scrollPosition.scrollLeft;\n      headerRef.current.setScrollLeft(scrollPosition.scrollLeft);\n    }\n    if (props.onScroll) {\n      props.onScroll(scrollPosition);\n    }\n  }\n\n  function handleDragEnter(overRowIdx: number) {\n    eventBus.dispatch(EventTypes.DRAG_ENTER, overRowIdx);\n  }\n\n  function handleCellClick({ rowIdx, idx }: Position) {\n    const { onRowClick } = props;\n    selectCell({ rowIdx, idx });\n\n    if (onRowClick) {\n      onRowClick(rowIdx, rowGetter(rowIdx), getColumn(idx));\n    }\n  }\n\n  function handleCellMouseDown(position: Position) {\n    eventBus.dispatch(EventTypes.SELECT_START, position);\n  }\n\n  function handleCellMouseEnter(position: Position) {\n    eventBus.dispatch(EventTypes.SELECT_UPDATE, position);\n  }\n\n  function handleCellContextMenu(position: Position) {\n    selectCell(position);\n  }\n\n  function handleCellDoubleClick({ rowIdx, idx }: Position) {\n    const { onRowDoubleClick } = props;\n    if (onRowDoubleClick) {\n      onRowDoubleClick(rowIdx, rowGetter(rowIdx), getColumn(idx));\n    }\n    openCellEditor(rowIdx, idx);\n  }\n\n  const handleDragHandleDoubleClick: InteractionMasksMetaData<R>['onDragHandleDoubleClick'] = (e) => {\n    const cellKey = getColumn(e.idx).key;\n    handleGridRowsUpdated(cellKey, e.rowIdx, rowsCount - 1, { [cellKey]: e.rowData[cellKey] }, UpdateActions.COLUMN_FILL);\n  };\n\n  const handleGridRowsUpdated: InteractionMasksMetaData<R>['onGridRowsUpdated'] = (cellKey, fromRow, toRow, updated, action, originRow) => {\n    const { onGridRowsUpdated } = props;\n    if (!onGridRowsUpdated) {\n      return;\n    }\n\n    const rowIds = [];\n    const start = Math.min(fromRow, toRow);\n    const end = Math.max(fromRow, toRow);\n\n    for (let i = start; i <= end; i++) {\n      rowIds.push(rowGetter(i)[rowKey]);\n    }\n\n    const fromRowData = rowGetter(action === UpdateActions.COPY_PASTE ? originRow! : fromRow);\n    const fromRowId = fromRowData[rowKey];\n    const toRowId = rowGetter(toRow)[rowKey];\n    onGridRowsUpdated({ cellKey, fromRow, toRow, fromRowId, toRowId, rowIds, updated: updated as never, action, fromRowData });\n  };\n\n  function handleCommit(commit: CommitEvent<R>) {\n    const targetRow = commit.rowIdx;\n    handleGridRowsUpdated(commit.cellKey, targetRow, targetRow, commit.updated, UpdateActions.CELL_UPDATE);\n  }\n\n  function getHeaderRows(): [HeaderRowData<R>, HeaderRowData<R> | undefined] {\n    const { headerRowHeight, onAddFilter } = props;\n    return [\n      { height: headerRowHeight || rowHeight, rowType: HeaderRowType.HEADER },\n      props.enableHeaderFilters ? {\n        rowType: HeaderRowType.FILTER,\n        filterable: true,\n        onFilterChange: onAddFilter,\n        height: headerFiltersHeight || headerRowHeight || rowHeight\n      } : undefined\n    ];\n  }\n\n  function openCellEditor(rowIdx: number, idx: number) {\n    selectCell({ rowIdx, idx }, true);\n  }\n\n  function scrollToColumn(colIdx: number) {\n    eventBus.dispatch(EventTypes.SCROLL_TO_COLUMN, colIdx);\n  }\n\n  function handleRowSelectionChange(rowIdx: number, row: R, checked: boolean, isShiftClick: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    const newSelectedRows = new Set(selectedRows);\n\n    if (checked) {\n      newSelectedRows.add(row[rowKey]);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          newSelectedRows.add(rowGetter(i)[rowKey]);\n        }\n      }\n    } else {\n      newSelectedRows.delete(row[rowKey]);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn,\n    selectCell,\n    openCellEditor\n  }));\n\n  const cellMetaData: CellMetaData<R> = {\n    rowKey,\n    onCellClick: handleCellClick,\n    onCellContextMenu: handleCellContextMenu,\n    onCellDoubleClick: handleCellDoubleClick,\n    onCellExpand: props.onCellExpand,\n    onRowExpandToggle: props.onRowExpandToggle,\n    getCellActions: props.getCellActions,\n    onDeleteSubRow: props.onDeleteSubRow,\n    onAddSubRow: props.onAddSubRow,\n    onDragEnter: handleDragEnter\n  };\n  if (cellRangeSelection) {\n    cellMetaData.onCellMouseDown = handleCellMouseDown;\n    cellMetaData.onCellMouseEnter = handleCellMouseEnter;\n  }\n\n  const interactionMasksMetaData: InteractionMasksMetaData<R> = {\n    onCheckCellIsEditable: props.onCheckCellIsEditable,\n    onCellCopyPaste: props.onCellCopyPaste,\n    onGridRowsUpdated: handleGridRowsUpdated,\n    onDragHandleDoubleClick: handleDragHandleDoubleClick,\n    onCellSelected: props.onCellSelected,\n    onCellDeSelected: props.onCellDeSelected,\n    onCellRangeSelectionStarted: cellRangeSelection && cellRangeSelection.onStart,\n    onCellRangeSelectionUpdated: cellRangeSelection && cellRangeSelection.onUpdate,\n    onCellRangeSelectionCompleted: cellRangeSelection && cellRangeSelection.onComplete,\n    onCommit: handleCommit\n  };\n\n  const headerRows = getHeaderRows();\n  const rowOffsetHeight = headerRows[0].height + (headerRows[1] ? headerRows[1].height : 0);\n\n  return (\n    <div\n      className=\"rdg-root\"\n      style={{ width, lineHeight: `${rowHeight}px` }}\n      ref={gridRef}\n    >\n      {columnMetrics && (\n        <>\n          <Header<R, K>\n            ref={headerRef}\n            rowKey={rowKey}\n            rowsCount={rowsCount}\n            rowGetter={rowGetter}\n            columnMetrics={columnMetrics}\n            onColumnResize={handleColumnResize}\n            headerRows={headerRows}\n            sortColumn={props.sortColumn}\n            sortDirection={props.sortDirection}\n            draggableHeaderCell={props.draggableHeaderCell}\n            onSort={props.onGridSort}\n            onHeaderDrop={props.onHeaderDrop}\n            allRowsSelected={selectedRows !== undefined && selectedRows.size === rowsCount}\n            onSelectedRowsChange={onSelectedRowsChange}\n            getValidFilterValues={props.getValidFilterValues}\n            cellMetaData={cellMetaData}\n          />\n          {rowsCount === 0 && isValidElementType(props.emptyRowsView) ? createElement(props.emptyRowsView) : (\n            <Canvas<R, K>\n              rowKey={rowKey}\n              rowHeight={rowHeight}\n              rowRenderer={props.rowRenderer}\n              rowGetter={rowGetter}\n              rowsCount={rowsCount}\n              selectedRows={selectedRows}\n              onRowSelectionChange={handleRowSelectionChange}\n              columnMetrics={columnMetrics}\n              onScroll={handleScroll}\n              cellMetaData={cellMetaData}\n              height={minHeight - rowOffsetHeight}\n              scrollToRowIndex={props.scrollToRowIndex}\n              contextMenu={props.contextMenu}\n              getSubRowDetails={props.getSubRowDetails}\n              rowGroupRenderer={props.rowGroupRenderer}\n              enableCellSelect={enableCellSelect}\n              enableCellAutoFocus={enableCellAutoFocus}\n              cellNavigationMode={cellNavigationMode}\n              eventBus={eventBus}\n              interactionMasksMetaData={interactionMasksMetaData}\n              RowsContainer={props.RowsContainer}\n              editorPortalTarget={editorPortalTarget}\n              onCanvasKeydown={props.onGridKeyDown}\n              onCanvasKeyup={props.onGridKeyUp}\n              renderBatchSize={renderBatchSize}\n              summaryRows={props.summaryRows}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(\n  DataGrid as React.RefForwardingComponent<DataGridHandle, DataGridProps<{ [key: string]: unknown }, string>>\n) as <R, K extends keyof R>(props: DataGridProps<R, K> & { ref?: React.Ref<DataGridHandle> }) => JSX.Element;\n"]}